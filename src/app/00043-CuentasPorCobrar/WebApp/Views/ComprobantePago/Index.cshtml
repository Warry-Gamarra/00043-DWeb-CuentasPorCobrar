@model WebApp.ViewModels.ConsultaComprobantePagoViewModel
@using GridMvc.Html
@Scripts.Render("~/bundles/jqueryval")

<style>
    .input-daterange {
        display: flex !important;
    }

    @@media (max-width: 768px) {
        .input-daterange {
            display: block !important;
        }
    }
</style>

<div class="container-fluid">
    <div class="col-12">
        <section class="content-header">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb float-right small d-none d-sm-inline-flex">
                    <li class="breadcrumb-item"><a href="@Url.Action("Index", "Home")"><i class="fa fa-home">&nbsp;</i>Inicio</a></li>
                    <li class="breadcrumb-item"><span><i class="fa fa-refresh">&nbsp;</i>Operaciones </span></li>
                    <li class="breadcrumb-item active"><span><i class="fa fa-file">&nbsp;</i>@ViewBag.Title </span></li>
                </ol>
            </nav>
            <h1 class="">@ViewBag.Title <small></small></h1>
        </section>
    </div>
    <br />

    <div class="col-12 mt-4">
        <div class="row">
            <div class="col-12">
                <div class="card">
                    <div class="card-body bg-light-gray">
                        <form name="frmConsultaComprobantePago" id="frmConsultaComprobantePago" method="get" action="@Url.Action("Index", "ComprobantePago")">
                            <div class="form-row">
                                @Html.Hidden("buscar", true)
                                <div class="form-group col-xl-2 col-lg-3 col-md-4">
                                    <label for="tipoPago">Tipo Pago</label>
                                    @Html.DropDownListFor(model => model.tipoPago, ViewBag.TipoPago as SelectList, "TODOS", new { @class = "form-control form-control-sm text-uppercase" })
                                </div>
                                <div class="form-group col-xl-2 col-lg-3 col-md-4">
                                    <label for="estadoGeneracionID">Estado Pago</label>
                                    @Html.DropDownListFor(model => model.estadoGeneracion, ViewBag.EstadosGeneracionComprobante as SelectList, "TODOS", new { @class = "form-control form-control-sm text-uppercase" })
                                </div>
                                <div class="form-group col-xl-2 col-lg-3 col-md-4">
                                    <label for="estadoComprobanteID">Estado Comprobante</label>
                                    @Html.DropDownListFor(model => model.estadoComprobanteID, ViewBag.EstadosComprobante as SelectList, "TODOS", new { @class = "form-control form-control-sm text-uppercase" })
                                </div>
                                <div class="form-group col-xl-2 col-lg-3 col-md-4">
                                    <label for="tipoComprobanteID">Tip.Comprobante Generado</label>
                                    @Html.DropDownListFor(model => model.tipoComprobanteID, ViewBag.TiposComprobante as SelectList, "TODOS", new { @class = "form-control form-control-sm text-uppercase" })
                                </div>
                                <div class="form-group col-xl-2 col-lg-3 col-md-4">
                                    <label for="entidadFinanciera">Entidad Financiera</label>
                                    @Html.DropDownListFor(model => model.entidadFinanciera, ViewBag.EntidadesFinancieras as SelectList, "TODOS", new { @class = "form-control form-control-sm text-uppercase" })
                                </div>
                                <div class="form-group col-xl-2 col-lg-3 col-md-4">
                                    <label for="idCtaDeposito">Cta. Deposito</label>
                                    @Html.DropDownListFor(model => model.idCtaDeposito, ViewBag.CtaDeposito as SelectList, "TODOS", new { @class = "form-control form-control-sm text-uppercase" })
                                </div>
                                <div class="form-group col-xl-2 col-lg-3 col-md-3">
                                    <label for="codOperacion">Cod. de operación</label>
                                    @Html.TextBoxFor(model => model.codOperacion, new { @class = "form-control form-control-sm" })
                                </div>
                                <div class="form-group col-xl-2 col-lg-3 col-md-3">
                                    <label for="codInterno">Cod. interno (BCP)</label>
                                    @Html.TextBoxFor(model => model.codInterno, new { @class = "form-control form-control-sm" })
                                </div>
                                <div class="form-group col-xl-2 col-lg-3 col-md-3">
                                    <label for="codDepositante">Cod. depositante</label>
                                    @Html.TextBoxFor(model => model.codDepositante, new { @class = "form-control form-control-sm" })
                                </div>
                                <div class="form-group col-xl-2 col-lg-3 col-md-3">
                                    <label for="nomDepositante">Nom. depositante</label>
                                    @Html.TextBoxFor(model => model.nomDepositante, new { @class = "form-control form-control-sm" })
                                </div>
                                <div class="form-group col-xl-4 col-lg-6 col-md-12">
                                    <div id="datepicker">
                                        <div class="input-daterange">
                                            <div class="form-group col-md-6 col-12" style="padding-left: 0px;">
                                                <label for="fechaDesde">Pagos desde</label>
                                                <div class="input-group">
                                                    @Html.TextBoxFor(model => model.fechaDesde, "{0:dd/MM/yyyy}",
                                                        new { @class = "form-control form-control-sm", @placeholder = "Fecha inicio", @readonly = "readonly" })
                                                    <div class="input-group-append">
                                                        <span class="input-group-text"><i class="fa fa-calendar-o"></i></span>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="form-group col-md-6 col-12" style="padding-left: 0px;">
                                                <label for="fechaHasta">Pagos hasta</label>
                                                <div class="input-group">
                                                    @Html.TextBoxFor(model => model.fechaHasta, "{0:dd/MM/yyyy}",
                                                        new { @class = "form-control form-control-sm", @placeholder = "Fecha final", @readonly = "readonly" })
                                                    <div class="input-group-append">
                                                        <span class="input-group-text"><i class="fa fa-calendar-o"></i></span>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="form-group col-xl-2 col-lg-3 col-md-4 col-sm-6">
                                    <button type="submit" id="btnConsulta" class="btn btn-block btn-outline-primary mt-4"><i class="fa fa-fw fa-search-plus"></i> Iniciar consulta</button>
                                </div>
                                <div class="form-group col-xl-2 col-lg-3 col-md-4 col-sm-6">
                                    <button type="button" id="btnVerificarEstadoComprobantes" class="btn btn-block btn-outline-primary mt-4"><i class="fa fa-fw fa-refresh"></i> Verificar estados</button>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>

                <div class="table-responsive mt-4">
                    <p class="h5">Relación de pagos</p>

                    @if (Model.resultado != null && Model.resultado.Count() > 0)
                    {
                        <a href="@Url.Action("GeneracionGrupal", "ComprobantePago")" class="modal-link">
                            <i class="fa fa-cog" aria-hidden="true"></i> Generar Número de Comprobantes
                        </a>
                        <br />
                        <a href="#" id="btnGenerarArchivosGrupal">
                            <i class="fa fa-file" aria-hidden="true"></i> Volver a generar archivo TXT
                        </a>
                    }

                    @Html.Grid(Model.resultado).Columns(columns =>
                    {
                        columns.Add(c => c.comprobantePago).Titled("Núm.Comprobante").Css("text-center");
                        columns.Add(c => c.tipoPago).Titled("Tip.Pago").Css("text-center");
                        columns.Add(c => c.codOperacion).Titled("Cod.Operación").Css("text-center");
                        columns.Add(c => c.codigoInterno).Titled("Cod.Interno (BCP)").Css("text-center");
                        columns.Add(c => c.codDepositante).Titled("Cod.Depositante");
                        columns.Add(c => c.nomDepositante).Titled("Nom.Depositante");
                        columns.Add(c => c.fecPago).Titled("Fec.Pago").Css("text-center");
                        columns.Add(c => c.montoTotal).Titled("Total Pagado").Css("text-center");
                        columns.Add(c => c.entidadDesc).Titled("Banco");
                        columns.Add().SetWidth(100).Encoded(false).Sanitized(false).Css("text-center").RenderValueAs(
                            model => "<a href=" + Url.Action("InformacioPago", "ComprobantePago", new { id = model.pagoBancoID }) + " class=\"modal-link " + model.textColorEstado + "\"><i class=\"fa fa-file\" aria-hidden=\"true\" title=\"Número de Comprobante\"></i></a>");
                    }).WithPaging(12).Sortable(true).WithGridItemsCount("Registros encontrados").EmptyText("No se encontraron registros")
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="modalEspera" tabindex="-1" role="dialog" aria-labelledby="lblModalEspera" aria-hidden="true" data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Mensaje del sistema</h5>
            </div>
            <div class="modal-body">
                <div class="d-flex align-items-center">
                    <strong>Verificando estado de comprobantes de pagos</strong>
                    <div class="spinner-border ml-auto text-primary" role="status" aria-hidden="true"></div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        const TIPO_COMPROBANTE = {
            FACTURA: 1
        };

        const MESSAGE_TYPE = {
            INFO: 'info',
            SUCCESS: 'success',
            WARNING: 'warning',
            ERROR: 'error'
        };

        $('#datepicker .input-daterange').datepicker({
            todayBtn: 'linked',
            language: 'es',
            format: 'dd/mm/yyyy',
            autoclose: true,
            weekStart: 0,
            clearBtn: true
        }).on('hide', function (e) {
            e.stopPropagation();
        });

        $('#datepicker .input-daterange #fechaDesde').datepicker('update', "@Model.fechaDesde");
        $('#datepicker .input-daterange #fechaHasta').datepicker('update', "@Model.fechaHasta");

        $(document).on("click", ".modal-header .closeModal", function (e) {
            window.location.reload();
        });

        $(document).on("click", ".modal-footer .closeModal", function (e) {
            window.location.reload();
        });

        $('#frmConsultaComprobantePago').on("click", "#btnConsulta", function (e) {
            document.forms.frmConsultaComprobantePago.action = "@Url.Action("Index", "ComprobantePago")";
            document.forms.frmConsultaComprobantePago.submit();
        });

        $('#frmConsultaComprobantePago').on('change', '#entidadFinanciera', function (e) {
            let idEntidadFinanc = this.value;

            ObtenerCtasDeposito(idEntidadFinanc);
        });

        $('#frmConsultaComprobantePago').on('click', '#btnVerificarEstadoComprobantes', function (e) {
            Swal.fire({
                title: '',
                text: '¿Desea verificar el estado de los comprobantes generados?',
                icon: MESSAGE_TYPE.WARNING,
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Si, continuar.',
                cancelButtonText: 'No, cancelar.'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        type: 'POST',
                        url: '@Url.Action("VerificarEstadoComprobantes", "ComprobantePago")',
                        dataType: 'json',
                        beforeSend: function () {
                            $('#modalEspera').modal('show');
                        },
                        success: function (data) {
                            let icon = MESSAGE_TYPE.ERROR;

                            if (data.Value) {
                                icon = MESSAGE_TYPE.SUCCESS;
                            }

                            Swal.fire({
                                title: '',
                                html: data.Message,
                                icon: icon,
                                confirmButtonColor: '#3085d6',
                                confirmButtonText: 'Ok'
                            }).then((result) => {
                                if (result.isConfirmed || result.dismiss === Swal.DismissReason.esc) {
                                    location.reload();
                                }
                            });
                        },
                        error: function (xhr, ajaxOptions, thrownError) {
                            var jsonException = JSON.parse(xhr.responseText);
                        },
                        complete: function () {
                            $('#modalEspera').modal('hide');
                        }
                    });
                }
            });
        });

        function ObtenerCtasDeposito(idEntidadFinanc) {
            let cmbCtasDeposito = $('#frmConsultaComprobantePago #idCtaDeposito');

            if (idEntidadFinanc !== undefined && idEntidadFinanc !== null && !isNaN(idEntidadFinanc) && idEntidadFinanc > 0) {
                $.ajax({
                    type: 'GET',
                    url: '@Url.Action("GetCtasDepositoPorBco", "Service", new { httproute = "ActionApi" })' + '/' + idEntidadFinanc,
                    dataType: 'json',
                    beforeSend: function () {
                        cmbCtasDeposito.empty();
                    },
                    success: function (data) {
                        if (data) {
                            let html = '<option>TODOS</option>';

                            $.each(data, function (i, item) {
                                html += '<option value="' + item.Value + '">' + item.TextDisplay + '</option>';
                            });

                            cmbCtasDeposito.html(html);
                        }
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        var jsonException = JSON.parse(xhr.responseText);
                    }
                });
            } else {
                cmbCtasDeposito.empty();
            }
        }

        $(document).on('click', '#btnGenerarArchivosGrupal', function (e) {
            Swal.fire({
                title: '',
                text: '¿Desea generar los archivos TXT faltantes para la consulta realizada?',
                icon: MESSAGE_TYPE.WARNING,
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Si, continuar.',
                cancelButtonText: 'No, cancelar.'
            }).then((result) => {
                if (result.isConfirmed) {

                    var parametros = {
                        tipoPago: $('#frmConsultaComprobantePago #tipoPago').val(),
                        estadoGeneracion: $('#frmConsultaComprobantePago #estadoGeneracion').val(),
                        estadoComprobanteID: $('#frmConsultaComprobantePago #estadoComprobanteID').val(),
                        tipoComprobanteID: $('#frmConsultaComprobantePago #tipoComprobanteID').val(),
                        entidadFinanciera: $('#frmConsultaComprobantePago #entidadFinanciera').val(),
                        idCtaDeposito: $('#frmConsultaComprobantePago #idCtaDeposito').val(),
                        codOperacion: $('#frmConsultaComprobantePago #codOperacion').val(),
                        codInterno: $('#frmConsultaComprobantePago #codInterno').val(),
                        codDepositante: $('#frmConsultaComprobantePago #codDepositante').val(),
                        nomDepositante: $('#frmConsultaComprobantePago #nomDepositante').val(),
                        fechaDesde: $('#frmConsultaComprobantePago #fechaDesde').val(),
                        fechaHasta: $('#frmConsultaComprobantePago #fechaHasta').val()
                    };

                    $.ajax({
                        type: 'POST',
                        url: '@Url.Action("GeneracionArchivosGrupal", "ComprobantePago")',
                        data: parametros,
                        dataType: 'json',
                        beforeSend: function () {
                            $('#modalEspera').modal('show');
                        },
                        success: function (data) {
                            let icon = MESSAGE_TYPE.ERROR;

                            if (data.Value) {
                                icon = MESSAGE_TYPE.SUCCESS;
                            }

                            Swal.fire({
                                title: '',
                                html: data.Message,
                                icon: icon,
                                confirmButtonColor: '#3085d6',
                                confirmButtonText: 'Ok'
                            }).then((result) => {
                                if (result.isConfirmed || result.dismiss === Swal.DismissReason.esc) {
                                    location.reload();
                                }
                            });
                        },
                        error: function (xhr, ajaxOptions, thrownError) {
                            var jsonException = JSON.parse(xhr.responseText);
                        },
                        complete: function () {
                            $('#modalEspera').modal('hide');
                        }
                    });
                }
            });
        });
    </script>
}
