@model WebApp.ViewModels.ConsultaObligacionEstudianteViewModel
@using GridMvc.Html
@Scripts.Render("~/bundles/jqueryval")

<style>
    .input-daterange {
        display: flex !important;
    }

    @@media (max-width: 768px) {
        .input-daterange {
            display: block !important;
        }
    }
</style>

<div class="container-fluid">
    <div class="col-12">
        <section class="content-header">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb float-right small d-none d-sm-inline-flex">
                    <li class="breadcrumb-item"><a href="@Url.Action("Index", "Home")"><i class="fa fa-home">&nbsp;</i>Inicio</a></li>
                    <li class="breadcrumb-item"><span><i class="fa fa-refresh">&nbsp;</i>Operaciones </span></li>
                    <li class="breadcrumb-item active"><span><i class="fa bi-person-lines-fill">&nbsp;</i>@ViewBag.Title </span></li>
                </ol>
            </nav>
            <h1 class="">@ViewBag.Title <small></small></h1>
        </section>
    </div>
    <br />

    <div class="col-12 mt-4">
        <div class="row">
            <div class="col-12">
                <div class="card">
                    <div class="card-body bg-light-gray">
                        @using (Html.BeginForm("ConsultaGeneracionObligaciones", "Obligaciones", FormMethod.Get, new { id = "formConsultaObligaciones" }))
                        {
                            <div class="form-row">
                                <div class="form-group col-lg-2 col-md-4 col-6">
                                    <label for="anio">Año</label>
                                    @Html.DropDownListFor(model => model.anio, ViewBag.Anios as SelectList, new { @class = "form-control form-control-sm" })
                                </div>

                                <div class="form-group col-lg-2 col-md-4 col-6">
                                    <label for="periodo">Periodo</label>
                                    @Html.DropDownListFor(model => model.periodo, ViewBag.Periodos as SelectList, "TODOS", new { @class = "form-control form-control-sm text-uppercase" })
                                </div>

                                <div class="form-group col-lg-2 col-md-4 col-12">
                                    <label for="tipoEstudio">Tipo de estudio</label>
                                    @Html.DropDownListFor(model => model.tipoEstudio, ViewBag.TipoEstudios as SelectList, new { @class = "form-control form-control-sm text-uppercase" })
                                </div>

                                <div class="form-group col-lg-3 col-md-6 col-12">
                                    <label for="codFac">Dependencia</label>
                                    @Html.DropDownListFor(model => model.codFac, ViewBag.Dependencias as SelectList, (string)ViewBag.FiltroDependencias, new { @class = "form-control form-control-sm text-uppercase" })
                                </div>

                                <div class="form-group col-lg-3 col-md-6 col-12">
                                    <label for="codEsc">Escuela</label>
                                    @Html.DropDownListFor(model => model.codEsc, ViewBag.Escuelas as SelectList, "TODOS", new { @class = "form-control form-control-sm text-uppercase" })
                                </div>

                                <div class="form-group col-lg-3 col-md-6 col-12">
                                    <label for="codRc">Especialidad</label>
                                    @Html.DropDownListFor(model => model.codRc, ViewBag.Especialidades as SelectList, "TODOS", new { @class = "form-control form-control-sm text-uppercase" })
                                </div>

                                <div class="form-group col-lg-2 col-md-6 col-6">
                                    <label for="esIngresante">Tipo de alumnos</label>
                                    @Html.DropDownListFor(model => model.esIngresante, ViewBag.TipoAlumno as SelectList, "TODOS", new { @class = "form-control form-control-sm text-uppercase" })
                                </div>

                                <div class="form-group col-lg-3 col-md-6 col-6">
                                    <label for="estaPagado">Estado de pago</label>
                                    @Html.DropDownListFor(model => model.estaPagado, ViewBag.EstadoPagoObligaciones as SelectList, "TODOS", new { @class = "form-control form-control-sm text-uppercase" })
                                </div>

                                <div class="form-group col-lg-2 col-md-6 col-6">
                                    <label for="codAlumno">Código de alumno</label>
                                    @Html.TextBoxFor(model => model.codAlumno, new { @class = "form-control form-control-sm" })
                                </div>

                                <div class="form-group col-lg-2 col-md-4 col-6">
                                    <label for="nomAlumno">Nombre alumno</label>
                                    @Html.TextBoxFor(model => model.nomAlumno, new { @class = "form-control form-control-sm" })
                                </div>

                                <div class="form-group col-lg-2 col-md-4 col-6">
                                    <label for="apePaternoAlumno">Apellido paterno</label>
                                    @Html.TextBoxFor(model => model.apePaternoAlumno, new { @class = "form-control form-control-sm" })
                                </div>

                                <div class="form-group col-lg-2 col-md-4 col-6">
                                    <label for="apeMaternoAlumno">Apellido materno</label>
                                    @Html.TextBoxFor(model => model.apeMaternoAlumno, new { @class = "form-control form-control-sm" })
                                </div>

                                <div class="form-group col-lg-2 col-6">
                                    <button type="submit" class="btn btn-block btn-outline-primary mt-4"><i class="fa fa-fw fa-search-plus"></i> Buscar</button>
                                </div>
                            </div>
                        }
                    </div>
                </div>

                <div class="table-responsive mt-4">
                    <p class="h5">Relación de estudiantes registrados en el sistema</p>

                    @Html.Grid(Model.resultado).Columns(columns => {
                       columns.Add(c => c.I_Anio).Titled("Año");
                       columns.Add(c => c.T_Periodo).Titled("Periodo");
                       columns.Add(c => c.C_CodAlu).Titled("Código alumno");
                       columns.Add(c => c.T_ApellidosNombres).Titled("Apellidos y nombres").Filterable(true);
                       columns.Add(c => c.T_DenomProg).Titled("Especialidad").Filterable(true);
                       columns.Add(c => c.T_EsIngresante).Titled("Tipo alumno").Filterable(true);
                       columns.Add(c => c.T_ProcesoDesc).Titled("Cuota").Filterable(true).Css("text-center");
                       columns.Add(c => c.I_MontoOblig).Titled("Monto Obl.").Filterable(true).Css("text-center");
                       columns.Add(c => c.T_FecVencto).Titled("Fec.Vcto").Filterable(true).Css("text-center");
                       columns.Add(c => c.T_Pagado).Titled("Estado").Filterable(true).Css("text-center");
                       columns.Add().SetWidth(90).Css("text-center").Encoded(false).Sanitized(false).RenderValueAs(model =>
                           model.B_Pagado.HasValue ? (model.B_Pagado.Value ? "" : "<a href=\""+ Url.Action("AsignarPagoObligacion", "Pagos", new { obligacionID = model.I_ObligacionAluID }) +
                           "\" class=\"modal-link-lg\"><i class=\"fa fa-pencil-square-o\"></i> Asignar</a>") : "");
                       columns.Add().SetWidth(90).Css("text-center").Encoded(false).Sanitized(false).RenderValueAs(model =>
                           @<a href="@Url.Action("VerPagosObligacion", "Pagos", new { obligacionID = model.I_ObligacionAluID })" class="modal-link-lg"><i class="fa fa-fw fa-money" aria-hidden="true"></i> Pago</a>);
                       columns.Add().SetWidth(90).Css("text-center").Encoded(false).Sanitized(false).RenderValueAs(model =>
                           model.B_Pagado.HasValue ? (!model.B_Pagado.Value ? "<a href=\"" + Url.Action("EditarDetalleObligacion", "Obligaciones", new { obligacionID = model.I_ObligacionAluID }) +
                           "\" class=\"modal-link-lg\"><i class=\"fa fa-pencil-square-o\"></i> Editar</a>" : "") : "");
                       columns.Add().SetWidth(90).Css("text-center").Encoded(false).Sanitized(false).RenderValueAs(model =>
                           model.B_Pagado.HasValue ? (!model.B_Pagado.Value ? "<a href=\"#\" onclick=\"ConfirmarAnulacion(" + model.I_ObligacionAluID + ", '" + model.T_ApellidosNombres.Replace("'", "`") + "', '" + model.T_ProcesoDesc + "', '" + model.T_FecVencto +
                           "');\"><i class=\"fa fa-trash\"></i> Eliminar</a>" : "") : "");
                    }).WithPaging(12).Sortable(true).WithGridItemsCount("Registros encontrados").EmptyText("No se encontraron registros")
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="modalEspera" tabindex="-1" role="dialog" aria-labelledby="lblModalEspera" aria-hidden="true" data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="lblModalEspera">Mensaje del sistema</h5>
            </div>
            <div class="modal-body">
                <div class="d-flex align-items-center">
                    <strong>Espere un momento . . .</strong>
                    <div class="spinner-border ml-auto text-primary" role="status" aria-hidden="true"></div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        const MESSAGE_TYPE = {
            INFO: 'info',
            SUCCESS: 'success',
            WARNING: 'warning',
            ERROR: 'error'
        };

        $("#formConsultaObligaciones").on("change", "#tipoEstudio", function (e) {
            let tipoEstudio = $(this).val();

            CargarDependencias(tipoEstudio);
        });

        $("#formConsultaObligaciones").on("change", "#codFac", function (e) {
            let tipoEstudio = $("#tipoEstudio").val();
            let codFac = $(this).val();

            CargarEscuelas(tipoEstudio, codFac);
        });

        $("#formConsultaObligaciones").on("change", "#codEsc", function (e) {
            let tipoEstudio = $("#tipoEstudio").val();
            let codFac = $("#formConsultaObligaciones #codFac").val();
            let codEsc = $(this).val();

            CargarEspecialidades(tipoEstudio, codFac, codEsc);
        });

        $(document).on("click", ".modal-header .closeModal", function (e) {
            window.location.reload();
        });

        $(document).on("click", ".modal-footer .closeModal", function (e) {
            window.location.reload();
        });

        function CargarDependencias(tipoEstudio) {
            let cmbDependencia = $('#formConsultaObligaciones #codFac');
            let cmbEscuelas = $('#formConsultaObligaciones #codEsc');
            let cmbEspecialidades = $('#formConsultaObligaciones #codRc');

            let parametros = {
                tipoEstudio: tipoEstudio
            };

            $.ajax({
                type: 'GET',
                url: ('@Url.Action("GetDependencias", "Service", new { httproute = "ActionApi" })'),
                data: parametros,
                dataType: 'json',
                beforeSend: function () {
                    cmbDependencia.html('');
                    cmbEscuelas.html('');
                    cmbEspecialidades.html('');
                },
                success: function (data) {
                    if (data) {
                        if (data.length > 0) {
                            let html = (data.length == 1) ? '' : '<option value="">TODOS</option>';

                            $.each(data, function (i, item) {
                                html += '<option value="' + item.Value + '">' + item.TextDisplay + '</option>'

                                if (i == 0) {
                                    CargarEscuelas(tipoEstudio, data.length == 1 ? item.Value : null);
                                }
                            });

                            cmbDependencia.html(html);
                        } else {
                            cmbDependencia.html('<option value="">TODOS</option>');
                            cmbEscuelas.html('<option value="">TODOS</option>');
                            cmbEspecialidades.html('<option value="">TODOS</option>');
                        }
                    }
                },
                error: function (xhr, ajaxOptions, thrownError) {
                }
            });
        }

        function CargarEscuelas(tipoEstudio, codFac) {
            let cmbEscuelas = $('#formConsultaObligaciones #codEsc');
            let cmbEspecialidades = $('#formConsultaObligaciones #codRc');

            let parametros = {
                tipoEstudio: tipoEstudio,
                codFac: codFac
            };

            $.ajax({
                type: 'GET',
                url: ('@Url.Action("GetEscuelas", "Service", new { httproute = "ActionApi" })'),
                data: parametros,
                dataType: 'json',
                beforeSend: function () {
                    cmbEscuelas.html('');
                    cmbEspecialidades.html('');
                },
                success: function (data) {
                    if (data) {
                        if (data.length > 0) {
                            let html = (data.length == 1) ? '' : '<option value="">TODOS</option>';

                            $.each(data, function (i, item) {
                                html += '<option value="' + item.Value + '">' + item.TextDisplay + '</option>'

                                if (i == 0) {
                                    CargarEspecialidades(tipoEstudio, codFac, data.length == 1 ? item.Value : null);
                                }
                            });

                            cmbEscuelas.html(html);
                        } else {
                            cmbEscuelas.html('<option value="">TODOS</option>');
                            cmbEspecialidades.html('<option value="">TODOS</option>');
                        }
                    }
                },
                error: function (xhr, ajaxOptions, thrownError) {
                }
            });
        }

        function CargarEspecialidades(tipoEstudio, codFac, codEsc) {
            let cmbEspecialidad = $('#formConsultaObligaciones #codRc');

            let parametros = {
                tipoEstudio: tipoEstudio,
                codFac: codFac,
                codEsc: codEsc
            };

            $.ajax({
                type: 'GET',
                url: ('@Url.Action("GetEspecialidades", "Service", new { httproute = "ActionApi" })'),
                data: parametros,
                dataType: 'json',
                beforeSend: function () {
                    cmbEspecialidad.html('');
                },
                success: function (data) {
                    if (data) {
                        let html = (data.length == 1) ? '' : '<option value="">TODOS</option>';

                        $.each(data, function (i, item) {
                            html += '<option value="' + item.Value + '">' + item.TextDisplay + '</option>'
                        });

                        cmbEspecialidad.html(html);
                    }
                },
                error: function (xhr, ajaxOptions, thrownError) {
                }
            });
        }

        $('#modal-container-lg').on('shown.bs.modal', function () {
            $(document).off('focusin.modal');
        });

        function mostrarBarraEspera(div, msg) {
            $('#' + div + ' #loading').css('display', 'block');
            $('#' + div + ' #loading h6').html(msg);
        }

        function ocultarBarraEspera(div) {
            $('#' + div + ' #loading').css('display', 'none');
            $('#' + div + ' #loading h6').html('');
        }

        function actualizarMontosCabecera(idObligacion, cabMontoObligacion, cabMontoPagado) {
            let montoObligacion = "0.00";
            let montoPagado = "0.00";

            $.ajax({
                type: 'GET',
                url: ('@Url.Action("GetCuotaPago", "Service", new { httproute = "ActionApi" })/' + idObligacion),
                dataType: 'json',
                beforeSend: function () {
                },
                success: function (data) {
                    if (data !== null) {
                        montoObligacion = data.T_MontoOblig;
                        montoPagado = data.T_MontoPagadoSinMora;
                    }
                },
                error: function (xhr, ajaxOptions, thrownError) {
                },
                complete: function () {
                    cabMontoObligacion.html(montoObligacion);

                    cabMontoPagado.html(montoPagado);
                }
            });
        }

        function ConfirmarAnulacion(idObligacion, persona, cuota, fecVcto) {
            Swal.fire({
                title: '',
                html: "¿Desea anular la cuota seleccionada?<br /><br />" + persona + "<br />" + cuota + "<br />(" + fecVcto + ")",
                icon: MESSAGE_TYPE.WARNING,
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Si, continuar.',
                cancelButtonText: 'No, cancelar.'
            }).then((result) => {
                if (result.isConfirmed) {
                    AnularObligacion(idObligacion);
                }
            });
        }

        function AnularObligacion(idObligacion) {
            let parametros = {
                obligaciones: [idObligacion]
            };

            $.ajax({
                type: 'POST',
                url: '@Url.Action("AnularCuotaPago", "Obligaciones")',
                data: parametros,
                dataType: 'json',
                beforeSend: function () {
                    $('#modalEspera').modal('show');
                },
                success: function (data) {
                    if (data) {
                        if (data.Value) {
                            window.location.reload();
                        } else {
                            Swal.fire({
                                title: '',
                                text: data.Message,
                                icon: MESSAGE_TYPE.ERROR,
                                timer: 6000
                            });
                        }
                    }
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    var jsonException = JSON.parse(xhr.responseText);
                    Swal.fire({
                        title: '',
                        text: jsonException.Message,
                        icon: MESSAGE_TYPE.ERROR,
                        timer: 6000
                    });
                },
                complete: function () {
                    $('#modalEspera').modal('hide');
                }
            });
        }
    </script>
}
