@model WebApp.ViewModels.PagoObligacionViewModel

<link href="~/Assets/fileInput/css/fileinput.min.css" rel="stylesheet" />
<script src="~/Assets/fileInput/js/fileinput.min.js"></script>
<script src="~/Assets/fileInput/js/locales/es.js"></script>
<script src="~/Assets/jquery/jquery.form.js"></script>
@Scripts.Render("~/bundles/jqueryval")

@using (Ajax.BeginForm("RegistrarPagoObligacion", "Pagos", null,
    new AjaxOptions
    {
        HttpMethod = "POST",
        InsertionMode = InsertionMode.Replace,
        UpdateTargetId = "div_msg",
        OnBegin = "Load",
        OnComplete = "Stop"
    }, new { @id = "form-obligacion-manual" })
)
{
    <div class="modal-header">
        <h5 class="modal-title">
            <i class="fa fa-paperclip text-primary">&nbsp;</i>
            Registro de pago de obligaciones
        </h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
    <div class="modal-body">
        <div class="col-md-12">
            @Html.Hidden("Submited", 0)
            @Html.AntiForgeryToken()
            @Html.HiddenFor(model => model.cantidad)
            @Html.HiddenFor(model => model.moneda)
            @Html.HiddenFor(model => model.tipoPago)

            <div class="form-group form-row">
                <label class="control-label col-form-label col-md-3 col-sm-4 col-12">Año</label>
                <div class="col-md-3 col-sm-4 col-12">
                    @Html.DropDownListFor(model => model.anio, ViewBag.Anios as SelectList, new { @class = "form-control" })
                    <p class="text-danger small">@Html.ValidationMessageFor(model => model.anio)</p>
                </div>
                <label class="control-label col-form-label col-md-3 col-sm-4 col-12">Periodo</label>
                <div class="col-md-3 col-sm-4 col-12">
                    @Html.DropDownListFor(model => model.idPeriodo, ViewBag.Periodos as SelectList, new { @class = "form-control" })
                    <p class="text-danger small">@Html.ValidationMessageFor(model => model.idPeriodo)</p>
                </div>
            </div>

            <div class="form-group form-row">
                <label for="codigoAlumno" class="control-label col-form-label col-md-3 col-sm-4 col-12">Código de alumno</label>
                <div class="input-group col-md-9 col-sm-10 col-12">
                    @Html.TextBoxFor(m => m.codigoAlumno, new { @class = "form-control" })
                    <div class="input-group-append">
                        <button id="btnConsultaOblAlumno" type="button" class="btn btn-primary"><i class="fa fa-search"></i></button>
                    </div>
                    <p class="text-danger small">@Html.ValidationMessageFor(m => m.codigoAlumno)</p>
                </div>
            </div>

            <div class="form-group form-row">
                <label for="codRc" class="control-label col-form-label col-md-3 col-sm-4 col-12">Especialidad</label>
                <div class="col-md-9 col-sm-10 col-12">
                    @Html.DropDownListFor(model => model.codRc, ViewBag.Especialidades as SelectList, new { @class = "form-control" })
                    <p class="text-danger small">@Html.ValidationMessageFor(model => model.codRc)</p>
                </div>
            </div>

            <div class="form-group form-row">
                <label for="nombreAlumno" class="control-label col-form-label col-md-3 col-sm-4 col-12">Nombre del alumno</label>
                <div class="col-md-9 col-sm-10 col-12">
                    @Html.TextBoxFor(m => m.nombreAlumno, new { @class = "form-control", @readonly = "readonly" })
                    <p class="text-danger small">@Html.ValidationMessageFor(m => m.nombreAlumno)</p>
                </div>
            </div>

            <div class="form-group form-row">
                <label for="idOligacionCab" class="control-label col-form-label col-md-3 col-sm-4 col-12">Obligación</label>
                <div class="col-md-9 col-sm-10 col-12">
                    @Html.DropDownListFor(model => model.idOligacionCab, ViewBag.Proceso as SelectList, new { @class = "form-control" })
                    <p class="text-danger small">@Html.ValidationMessageFor(model => model.idOligacionCab)</p>
                </div>
            </div>

            <div class="form-group form-row">
                <label for="codigoOperacion" class="control-label col-form-label col-md-3 col-sm-4 col-12">Código de operación</label>
                <div class="col-md-9 col-sm-10 col-12">
                    @Html.TextBoxFor(m => m.codigoOperacion, new { @class = "form-control" })
                    <p class="text-dangersmall">@Html.ValidationMessageFor(m => m.codigoOperacion)</p>
                </div>
            </div>

            <div class="form-group form-row">
                <label for="codigoReferencia" class="control-label col-form-label col-md-3 col-sm-4 col-12">Código de referencia</label>
                <div class="col-md-9 col-sm-10 col-12">
                    @Html.TextBoxFor(m => m.codigoReferencia, new { @class = "form-control" })
                    <p class="text-danger small">@Html.ValidationMessageFor(m => m.codigoReferencia)</p>
                </div>
            </div>

            <div class="form-group form-row">
                <label for="EntidadFinanciera" class="control-label col-form-label col-md-3 col-sm-4 col-12">Entidad financiera</label>
                <div class="col-md-9 col-sm-10 col-12">
                    @Html.DropDownListFor(model => model.idEntidadFinanciera, ViewBag.EntidadesFinancieras as SelectList, "[ SELECCIONAR ]", new { @class = "form-control" })
                    <p class="text-danger small">@Html.ValidationMessageFor(model => model.idEntidadFinanciera)</p>
                </div>
            </div>

            <div class="form-group form-row">
                <label for="fechaPago" class="control-label col-form-label col-md-3 col-sm-4 col-12">Fecha de pago</label>
                <div class="col-md-9 col-sm-10 col-12">
                    <div class="input-group date">
                        @Html.TextBoxFor(m => m.fechaPago, "{0:dd/MM/yyyy}", new { @class = "form-control", @readonly = "readonly" })
                        <div class="input-group-append">
                            <span class="input-group-text"><i class="fa fa-calendar-o"></i></span>
                        </div>
                    </div>
                    <p class="text-danger small">@Html.ValidationMessageFor(m => m.fechaPago)</p>
                </div>
            </div>

            <div class="form-group form-row">
                <label for="lugarPago" class="control-label col-form-label col-md-3 col-sm-4 col-12">Lugar de pago</label>
                <div class="col-md-9 col-sm-10 col-12">
                    @Html.TextBoxFor(m => m.lugarPago, new { @class = "form-control" })
                    <p class="text-danger small">@Html.ValidationMessageFor(m => m.lugarPago)</p>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-footer" id="div_msg">
        <div class="col-md-12" style="display:none" id="loading">
            <h6>Actualizando los datos...</h6>

            <div class="progress">
                <div class="indeterminate"></div>
            </div>
        </div>

        <button type="submit" class="btn btn-primary" id="btnsubmit"><i class="fa fa-save"></i> Grabar pago</button>
        <button type="button" class="btn btn-secondary" id="btnCancel" data-dismiss="modal"><i class="fa fa-times-circle-o"></i> Cancelar</button>
    </div>
}

<script>
    const MESSAGE_TYPE = {
        INFO: 'info',
        SUCCESS: 'success',
        WARNING: 'warning',
        ERROR: 'error'
    };

    $('.input-group.date').datepicker({
        todayBtn: 'linked',
        language: 'es',
        format: 'dd/MM/yyyy',
        autoclose: true,
        weekStart: 0,
        orientation: 'bottom auto',
        calendarWeeks: true,
    }).on('hide', function (e) {
        e.stopPropagation();
    });

    $(document).on('click', '#btnConsultaOblAlumno', function () {
        let anio = $('#form-obligacion-manual #anio').val();
        let periodo = $('#form-obligacion-manual #idPeriodo').val();
        let codAlu = $('#form-obligacion-manual #codigoAlumno').val();
        let especialidad = $('#form-obligacion-manual #codRc').val();

        if (codAlu === undefined) {
            MostrarMensajeObligacionesPorAlumno('No se puede obtener el valor del campo Código de Alumno.', MESSAGE_TYPE.WARNING);
        } else  if (codAlu === null || codAlu.length !== 10) {
            MostrarMensajeObligacionesPorAlumno('El campo Código de Alumno es requerido.', MESSAGE_TYPE.WARNING);
        } else if (especialidad === null || especialidad.length !== 3) {
            ObtenerEspecialidadesAlumno(codAlu);
        } else {
            BuscarObligacionesAlumno(anio, periodo, especialidad, codAlu);
        }
    });

    $(document).on('keypress', '#form-obligacion-manual #codigoAlumno', function (e) {
        if (e.which === 13) {
            e.preventDefault();

            let codAlu = $('#form-obligacion-manual #codigoAlumno').val();

            if (codAlu === null || codAlu.length !== 10) {
                MostrarMensajeObligacionesPorAlumno('El campo Código de Alumno es requerido.', MESSAGE_TYPE.WARNING);
            } else {
                ObtenerEspecialidadesAlumno(codAlu);
            }
        }
    });
    
    function MostrarMensajeObligacionesPorAlumno(errorMessage, messageType) {
        Swal.fire({
            title: '',
            text: errorMessage,
            icon: messageType,
            timer: 6000
        });
    }

    function ObtenerEspecialidadesAlumno(codAlu) {
        let parametros = {
            codAlu: codAlu
        };

        $.ajax({
            type: 'GET',
            url: '@Url.Action("ObtenerEspecialidadesAlumno", "Obligaciones")',
            data: parametros,
            dataType: 'json',
            beforeSend: function () {
                llenarComboEspecialidades(null);
            },
            success: function (data) {
                llenarComboEspecialidades(data);
            },
            error: function (xhr, ajaxOptions, thrownError) {
                let jsonException = JSON.parse(xhr.responseText);
                MostrarMensajeObligacionesPorAlumno(jsonException.Message, MESSAGE_TYPE.ERROR);
            }
        });
    }

    function llenarComboEspecialidades(especialidades) {
        let cmbEspecialidad = $('#form-obligacion-manual #codRc');

        cmbEspecialidad.empty();

        if (especialidades !== null) {
            let html = '';

            $.each(especialidades, function (i, item) {
                html += '<option value="' + item.C_RcCod + '">' + item.T_EspDesc + '</option>';

                if (i === 0) {
                    let anio = $('#form-obligacion-manual #anio').val();
                    let periodo = $('#form-obligacion-manual #idPeriodo').val();
                    let codAlu = $('#form-obligacion-manual #codigoAlumno').val();

                    BuscarObligacionesAlumno(anio, periodo, item.C_RcCod, codAlu);
                }
            });

            cmbEspecialidad.html(html);
        }
    }

    function BuscarObligacionesAlumno(anio, periodo, codRc, codAlu) {

        let cmbNombreAlumno = $('#form-obligacion-manual #nombreAlumno');
        let cmbObligaciones = $('#form-obligacion-manual #idOligacionCab');

        let parametros = {
            anio: anio,
            periodo: periodo,
            codRc: codRc,
            codAlu: codAlu
        };

        $.ajax({
            type: 'GET',
            url: '@Url.Action("BuscarObligacionesAlumno", "Obligaciones")',
            data: parametros,
            dataType: 'json',
            beforeSend: function () {
                cmbNombreAlumno.val('');
                cmbObligaciones.empty();

            },
            success: function (data) {
                if (data) {
                    if (data.alumno !== null) {
                        let nombreAlumno = data.alumno.T_Nombre + ' ' +
                            data.alumno.T_ApePaterno + ' ' +
                            data.alumno.T_ApeMaterno;

                        cmbNombreAlumno.val(nombreAlumno.trim());
                    }

                    if (data.cuotas_pago !== null) {
                        let html = '';
                        let cantObligaciones = 0;

                        $.each(data.cuotas_pago, function (i, item) {
                            if (!item.B_Pagado) {
                                html += '<option value="' + item.I_ObligacionAluID + '">' +
                                    item.T_ProcesoDesc + ' ( S/. ' + item.T_MontoOblig + ' - F.Vcto. ' + item.T_FecVencto + ')</option>';

                                cantObligaciones++;
                            }
                        });

                        if (cantObligaciones > 0) {
                            cmbObligaciones.html(html);
                        } else {
                            MostrarMensajeObligacionesPorAlumno('El alumno no cuenta con obligaciones.', MESSAGE_TYPE.INFO);
                        }
                    }
                }
            },
            error: function (xhr, ajaxOptions, thrownError) {
                var jsonException = JSON.parse(xhr.responseText);
                MostrarMensajeObligacionesPorAlumno(jsonException.Message, MESSAGE_TYPE.ERROR);
            }
        });
    }
</script>