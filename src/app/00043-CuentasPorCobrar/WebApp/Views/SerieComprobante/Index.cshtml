@model IEnumerable<WebApp.Models.SerieComprobanteModel>
@using GridMvc.Html

<div class="container-fluid">
    <div class="col-12">
        <section class="content-header">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb float-right small d-none d-sm-inline-flex">
                    <li class="breadcrumb-item"><a href="@Url.Action("Index", "Home")"><i class="fa fa-home">&nbsp;</i>Inicio</a></li>
                    <li class="breadcrumb-item"><span><i class="fa bi-tools">&nbsp;</i>Mantenimiento </span></li>
                    <li class="breadcrumb-item active"><span><i class="fa bi-stack">&nbsp;</i>@ViewBag.Title </span></li>
                </ol>
            </nav>
            <h1 class="">@ViewBag.Title <small></small></h1>
        </section>
    </div>
    <br />

    <div class="col-12">
        <a href="@Url.Action("Create", "SerieComprobante")" class="btn btn-primary float-right modal-link">
            <i class="fa fa-plus-circle"></i> Agregar Nueva Serie
        </a>

        <p class="h3"><small>Números de serie registrados</small></p>
        <br />

        <br />
        <div class="table-responsive" style="min-height:300px">
            @Html.Grid(Model).Columns(columns =>
            {
                columns.Add(c => c.numeroSerie).Css("text-center").Titled("Número de Serie").Filterable(true);
                columns.Add(c => c.finNumeroComprobante).Css("text-center").Titled("Cantidad Comprobantes").Filterable(true);
                columns.Add(c => c.diasAnterioresPermitido).Css("text-center").Titled("Días para generar").Filterable(true);
                columns.Add(c => c.estaHabilitado).SetWidth(100).Css("text-center").Encoded(false).Sanitized(false)
                    .RenderValueAs(model => model.estaHabilitado ?
                    @Html.Raw("<span id=\"td" + @model.serieID.Value + "\"><button type=\"submit\" class=\"btn btn-xs btn-success\" onclick=\"ChangeStateReloadPage(" + @model.serieID.Value + ", " + @model.estaHabilitado.ToString().ToLower() + ", '" + @Url.Action("ChangeState", "SerieComprobante") + "');\"><i class=\"fa fa-check-circle-o\">&nbsp;</i><span class=\"d-none d-md-inline-block\">Habilitado</span></button></span>")
                    : @Html.Raw("<span id=\"td" + @model.serieID.Value + "\"><button type=\"submit\" class=\"btn btn-xs btn-secondary\" onclick=\"ChangeStateReloadPage(" + @model.serieID.Value + ", " + @model.estaHabilitado.ToString().ToLower() + ", '" + @Url.Action("ChangeState", "SerieComprobante") + "');\"><i class=\"fa fa-minus-circle\">&nbsp;</i><span class=\"d-none d-md-inline-block\">Deshabilitado</span></button></span>"))
                    .Filterable(false).SetWidth(160).Titled("Estado");
                columns.Add().SetWidth(200).Css("text-center").Encoded(false).Sanitized(false).RenderValueAs(model => @<a href="@Url.Action("Edit", "SerieComprobante", new { id = model.serieID.Value, area = "" })" class="modal-link"><i class="fa fa-pencil-square-o" aria-hidden="true">&nbsp;</i><span class="d-none d-md-inline-block">Editar</span></a>);
                columns.Add().SetWidth(200).Css("text-center").Encoded(false).Sanitized(false).RenderValueAs(model => "<a href=\"\" class=\"btn-eliminar\" data-id=\"" + model.serieID.ToString() + "\"><i class=\"fa fa-trash\" aria-hidden=\"true\">&nbsp;</i><span class=\"d-none d-md-inline-block\">Eliminar</span></a>");
            }).WithPaging(10).Sortable(true).WithGridItemsCount("Registros encontrados").EmptyText("No se encontraron registros")
        </div>
    </div>
</div>

<script type="text/javascript">
    const Message = {
        INFO: 'info',
        SUCCESS: 'success',
        WARNING: 'warning',
        ERROR: 'error'
    };

    $(document).on('click', '.btn-eliminar', function (event) {
        event.preventDefault();

        let id = $(this).data("id");
        let token = $('input[name="__RequestVerificationToken"]').val();

        Swal.fire({
            title: '',
            text: '¿Desea eliminar este registro?',
            icon: Message.WARNING,
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Si, continuar.',
            cancelButtonText: 'No, cancelar.'
        }).then((result) => {
            if (result.isConfirmed) {
                $.ajax({
                    url: '@Url.Action("Eliminar", "SerieComprobante")/' + id,
                    type: "POST",
                    data: { __RequestVerificationToken: token },
                    beforeSend: function () {
                    },
                    success: function (data) {
                        let icon = data.Value ? Message.SUCCESS : Message.ERROR;

                        mostrarMensajeSistema(data.Message, icon, data.Value);
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                    }
                });
            }
        });
    });

    function mostrarMensajeSistema(mensaje, icon, recargarPagina) {
        Swal.fire({
            title: '',
            text: mensaje,
            icon: icon,
            timer: 6000,
            confirmButtonColor: '#0069d9',

        }).then((result) => {
            if (result.isConfirmed && recargarPagina !== undefined && recargarPagina !== null && recargarPagina == true) {
                location.reload();
            }
        });
    }
</script>

