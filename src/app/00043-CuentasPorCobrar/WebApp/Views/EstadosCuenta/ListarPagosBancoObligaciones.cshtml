@model WebApp.ViewModels.ConsultaPagosBancoObligacionesViewModel

@using GridMvc.Html
@Scripts.Render("~/bundles/jqueryval")

<style>
    .input-daterange {
        display: flex !important;
    }

    @@media (max-width: 768px) {
        .input-daterange {
            display: block !important;
        }
    }
</style>

<div class="container-fluid">
    <div class="col-12">
        <section class="content-header">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb float-right small d-none d-sm-inline-flex">
                    <li class="breadcrumb-item"><a href="@Url.Action("Index", "Home")"><i class="fa fa-home">&nbsp;</i>Inicio</a></li>
                    <li class="breadcrumb-item"><span><i class="fa fa-search">&nbsp;</i>Consultas </span></li>
                    <li class="breadcrumb-item active"><span><i class="fa bi-person-lines-fill">&nbsp;</i>@ViewBag.Title </span></li>
                </ol>
            </nav>
            <h1 class="">@ViewBag.Title <small></small></h1>
        </section>
    </div>
    <br />

    <div class="col-12 mt-4">
        <div class="row">
            <div class="col-12">
                <div class="card">
                    <div class="card-body bg-light-gray">
                        <form name="frmConsultaPagosBancoObligaciones" id="frmConsultaPagosBancoObligaciones" method="get" action="/">
                            <div class="form-row">
                                <div class="form-group col-lg-1 col-md-2 col-sm-4 col-6">
                                    <label for="codAlumno">Cod. Alumno</label>
                                    @Html.TextBoxFor(model => model.codAlumno, new { @class = "form-control form-control-sm" })
                                </div>
                                <div class="form-group col-lg-1 col-md-2 col-sm-4 col-6">
                                    <label for="nomAlumno">Nombre alumno</label>
                                    @Html.TextBoxFor(model => model.nomAlumno, new { @class = "form-control form-control-sm" })
                                </div>
                                <div class="form-group col-lg-1 col-md-2 col-sm-4 col-6">
                                    <label for="apePaternoAlumno">Apellido paterno</label>
                                    @Html.TextBoxFor(model => model.apePaternoAlumno, new { @class = "form-control form-control-sm" })
                                </div>
                                <div class="form-group col-lg-1 col-md-2 col-sm-4 col-6">
                                    <label for="apeMaternoAlumno">Apellido materno</label>
                                    @Html.TextBoxFor(model => model.apeMaternoAlumno, new { @class = "form-control form-control-sm" })
                                </div>
                                <div class="form-group col-lg-1 col-md-2 col-sm-4 col-6">
                                    <label for="codOperacion">Cod Operación</label>
                                    @Html.TextBoxFor(model => model.codOperacion, new { @class = "form-control form-control-sm" })
                                </div>
                                <div class="form-group col-lg-1 col-md-2 col-sm-4 col-6">
                                    <label for="codInterno">Cod Interno (BCP)</label>
                                    @Html.TextBoxFor(model => model.codInterno, new { @class = "form-control form-control-sm" })
                                </div>
                                <div class="form-group col-lg-2 col-md-2 col-sm-4 col-6">
                                    <label for="banco">Entidad Financiera</label>
                                    @Html.DropDownListFor(model => model.banco, ViewBag.EntidadesFinancieras as SelectList, "TODOS",
                                        new { @class = "form-control form-control-sm text-uppercase" })
                                </div>
                                <div class="form-group col-lg-2 col-md-2 col-sm-4 col-6">
                                    <label for="ctaDeposito">Cta.Deposito</label>
                                    @Html.DropDownListFor(model => model.ctaDeposito, ViewBag.CtaDeposito as SelectList, "TODOS",
                                        new { @class = "form-control form-control-sm text-uppercase" })
                                </div>
                                <div class="form-group col-xl-4 col-lg-12 col-md-12 col-sm-12 col-12">
                                    <div id="datepicker">
                                        <div class="input-daterange">
                                            <div class="form-group col-lg-6 col-md-6 col-sm-12 col-12" style="padding-left: 0px;">
                                                <label for="fechaDesde">Pagos desde</label>
                                                <div class="input-group">
                                                    @Html.TextBoxFor(model => model.fechaDesde, "{0:dd/MM/yyyy}",
                                                        new { @class = "form-control form-control-sm", @placeholder = "Fecha inicio", @readonly = "readonly" })
                                                    <div class="input-group-append">
                                                        <span class="input-group-text"><i class="fa fa-calendar-o"></i></span>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="form-group col-lg-6 col-md-6 col-sm-12 col-12" style="padding-left: 0px;">
                                                <label for="fechaHasta">Pagos hasta</label>
                                                <div class="input-group">
                                                    @Html.TextBoxFor(model => model.fechaHasta, "{0:dd/MM/yyyy}",
                                                        new { @class = "form-control form-control-sm", @placeholder = "Fecha final", @readonly = "readonly" })
                                                    <div class="input-group-append">
                                                        <span class="input-group-text"><i class="fa fa-calendar-o"></i></span>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div class="form-group col-lg-2 col-md-2 col-sm-4 col-6">
                                    <label for="condicion">Condición</label>
                                    @Html.DropDownListFor(model => model.condicion, ViewBag.CondicionesPago as SelectList, "TODOS",
                                        new { @class = "form-control form-control-sm text-uppercase" })
                                </div>

                                <div class="form-group col-lg-2 col-md-3 col-12">
                                    @Html.Hidden("buscar", true)
                                    <button type="button" id="btnConsultar" class="btn btn-block btn-outline-primary mt-4"><i class="fa fa-fw fa-search-plus"></i> Iniciar consulta</button>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>

                <div class="table-responsive mt-4">
                    <p class="h5">Relación de estudiantes registrados en el sistema</p>
                    @if (Model.resultado != null && Model.resultado.Count() > 0)
                    {
                        <button type="button" id="btnDescargaExcel" class="btn btn-link pl-0">Descargar información en Excel [.xlsx]</button>
                    }

                    @Html.Grid(Model.resultado).Columns(columns => {
                        columns.Add(c => c.T_EntidadDesc).Titled("Banco");
                        columns.Add(c => c.C_NumeroCuenta).Titled("Cta.Deposito").Filterable(true).Css("text-center");
                        columns.Add(c => c.C_CodOperacion).Titled("Cod.Operación").Css("text-center");
                        columns.Add(c => c.C_CodigoInterno).Titled("Cod.Interno (BCP)").Css("text-center");
                        columns.Add(c => c.C_CodDepositante).Titled("Cod.Depositante").Filterable(true).Css("text-center");
                        columns.Add(c => c.T_DatosDepositante).Titled("Depositante").Filterable(true);
                        columns.Add(c => c.D_FecPago).Titled("Fecha Pago").Filterable(true).Css("text-center");
                        columns.Add(c => c.I_MontoPago).Titled("Monto Pagado").Filterable(true).Css("text-center");
                        columns.Add(c => c.T_LugarPago).Titled("Lugar");
                        columns.Add(c => c.D_FecCre).Titled("Fec.Reg.Sistema").Filterable(true).Css("text-center");
                        columns.Add(c => c.T_Condicion).Titled("Condición");
                    }).WithPaging(12).Sortable(true).WithGridItemsCount("Registros encontrados").EmptyText("No se encontraron registros")
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $('#datepicker .input-daterange').datepicker({
            todayBtn: 'linked',
            language: 'es',
            format: 'dd/mm/yyyy',
            autoclose: true,
            weekStart: 0,
            clearBtn: true
        }).on('hide', function (e) {
            e.stopPropagation();
        });

        $('#datepicker .input-daterange #fechaDesde').datepicker('update', "@Model.fechaDesde");
        $('#datepicker .input-daterange #fechaHasta').datepicker('update', "@Model.fechaHasta");

        $(document).on("click", "#btnConsultar", function (e) {
            document.forms.frmConsultaPagosBancoObligaciones.action = "@Url.Action("ListarPagosBancoObligaciones", "EstadosCuenta")";
            document.forms.frmConsultaPagosBancoObligaciones.submit();
        });

        $(document).on("click", "#btnDescargaExcel", function (e) {
            document.forms.frmConsultaPagosBancoObligaciones.action = "@Url.Action("ListarPagosBancoObligacionesDescargaExcel", "EstadosCuenta")";
            document.forms.frmConsultaPagosBancoObligaciones.submit();
        });

        $(document).on('change', '#frmConsultaPagosBancoObligaciones #banco', function (e) {
            let idEntidadFinanc = this.value;

            ObtenerCtasDeposito(idEntidadFinanc);
        });

        function ObtenerCtasDeposito(idEntidadFinanc) {
            let cmbCtasDeposito = $('#frmConsultaPagosBancoObligaciones #ctaDeposito');

            if (idEntidadFinanc !== undefined && idEntidadFinanc !== null && !isNaN(idEntidadFinanc) && idEntidadFinanc > 0) {
                $.ajax({
                    type: 'GET',
                    url: '@Url.Action("GetCtasDepositoPorBco", "Service", new { httproute = "ActionApi" })' + '/' + idEntidadFinanc,
                    dataType: 'json',
                    beforeSend: function () {
                        cmbCtasDeposito.empty();
                    },
                    success: function (data) {
                        if (data) {
                            let html = '<option>TODOS</option>';

                            $.each(data, function (i, item) {
                                html += '<option value="' + item.Value + '">' + item.TextDisplay + '</option>';
                            });

                            cmbCtasDeposito.html(html);
                        }
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        var jsonException = JSON.parse(xhr.responseText);
                        //MostrarMensajeSistema(jsonException.Message, 'error');
                    }
                });
            } else {
                cmbCtasDeposito.empty();
                let html = '<option>TODOS</option>';
                cmbCtasDeposito.html(html);
            }
        }
    </script>
}
